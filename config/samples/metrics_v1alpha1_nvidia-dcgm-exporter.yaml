# Monitors data from NVIDIA's DCGM exporter.
# Depending on your configuration, you might have to modify labels if you have customized them
# from the defaults.
apiVersion: metrics.turbonomic.io/v1alpha1
kind: PrometheusQueryMapping
metadata:
  name: nvidia-dcgm-exporter
  labels:
    mapping: nvidia-dcgm-exporter
spec:
  entities:
  - type: nvidiaGPU
    attributes:
    - label: exported_container
      name: container
    - label: modelName
      # label is kept in addition to labels for backward compatibility
      labels: 
      - modelName
      - GPU_I_PROFILE
      delimeter: "-MIG-"
      name: gpuModel
    - label: gpu
      name: gpuNum
    - isIdentifier: true
      label: UUID
      # label is kept in addition to labels for backward compatibility
      labels: 
        - UUID
        - GPU_I_ID
      name: id
    - label: exported_namespace
      name: namespace
    - as: $hostIP
      label: instance
      matches: (?P<hostIP>\d{1,3}(?:\.\d{1,3}){3}(?::\d{1,5})??)
      name: nodeIp
    - label: Hostname
      name: nodeName
    - label: exported_pod
      name: pod
    metrics:
    - type: gpu
      queries:
      - type: used
        # The following "A >= B OR B" expression computes the max of A and B, which are the two moving averages of the
        # "DCGM_FI_PROF_GR_ENGINE_ACTIVE".  This metric is equivalent to "DCGM_FI_DEV_GPU_UTIL" which however doesn't
        # work for MIG, while "DCGM_FI_PROF_GR_ENGINE_ACTIVE" works for both MIG and whole GPU.
        # If for some reason, "DCGM_FI_PROF_GR_ENGINE_ACTIVE" is not available and "DCGM_FI_DEV_GPU_UTIL" is available then
        # replace "DCGM_FI_PROF_GR_ENGINE_ACTIVE{}[DURATION]" with "DCGM_FI_DEV_GPU_UTIL{}[DURATION]/100",
        # as the two metrics are off by factor of 100.
        # Taking the max of the two moving averages will help achieve fast scaling up and slow/conservative scaling down.
        promql: avg_over_time(DCGM_FI_PROF_GR_ENGINE_ACTIVE{}[10m]) >= avg_over_time(DCGM_FI_PROF_GR_ENGINE_ACTIVE{}[1h])
          OR avg_over_time(DCGM_FI_PROF_GR_ENGINE_ACTIVE{}[1h])
        # If more desired so, replace the above with the following to simply retrieve one single 10-minute moving average.
        # promql: avg_over_time(DCGM_FI_PROF_GR_ENGINE_ACTIVE{}[10m])
    - type: gpuMem
      queries:
      - type: used
        # This even more complicated expression below exhibits two patterns:
        #   1) the same "A >= B OR B" pattern to compute the max of two moving averages as in the previous metric;
        #   2) the "X OR Y - Z" pattern to compute the metric.
        # The 2nd pattern is because out of the "total", the "used" and the "free", only two are available, and we don't
        # know which two.  Therefore, if the "used" isn't available, then we go for "total" - "free".
        promql: (avg_over_time(DCGM_FI_DEV_FB_USED[10m]) > avg_over_time(DCGM_FI_DEV_FB_USED[1h])
          OR avg_over_time(DCGM_FI_DEV_FB_USED[1h])
          OR avg_over_time(DCGM_FI_DEV_FB_TOTAL[10m]) - avg_over_time(DCGM_FI_DEV_FB_FREE[10m]) > avg_over_time(DCGM_FI_DEV_FB_TOTAL[1h]) - avg_over_time(DCGM_FI_DEV_FB_FREE[1h])
          OR avg_over_time(DCGM_FI_DEV_FB_TOTAL[1h]) - avg_over_time(DCGM_FI_DEV_FB_FREE[1h])) / 1024
        # If more desired so, replace the above with the following to simply retrieve one single 10-minute moving average.
        # promql: (avg_over_time(DCGM_FI_DEV_FB_USED[10m]) OR avg_over_time(DCGM_FI_DEV_FB_TOTAL[10m]) - avg_over_time(DCGM_FI_DEV_FB_FREE[10m])) / 1024
      - type: capacity
        # Capacity should be a constant; so there's no need to compute using moving averages.
        promql: (DCGM_FI_DEV_FB_TOTAL OR DCGM_FI_DEV_FB_USED + DCGM_FI_DEV_FB_FREE) / 1024
